// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] @relation("SizeToProduct") // Unique relation name
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] @relation("ColorToProduct") // Unique relation name
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

enum SalesStatus {
  SLOW
  FAST
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  stock       Int         @default(0)
  salesCount  Int         @default(0)
  salesStatus SalesStatus @default(SLOW)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizes       Size[]      @relation("SizeToProduct")
  colors      Color[]     @relation("ColorToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      Image[]     @relation("ProductToImage")
  orderItems  OrderItem[] @relation("ProductToOrderItem")

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  userId     String      @default("")
  email      String      @default("")
  name       String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  payments   Payment[]   @relation("OrderToPayment")

  @@index([storeId])
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation("OrderToPayment", fields: [orderId], references: [id], onDelete: Cascade)
  email     String
  phone     String
  address   String
  name      String
  imageSrc  String
  date      DateTime
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int      @default(1) // Number of this product in the order
  colors      String[]
  sizes       String[]
  isBackorder Boolean  @default(false) // Flag for backordered items
  isReturned  Boolean  @default(false) // Flag for returned items
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation("ProductToOrderItem", fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
